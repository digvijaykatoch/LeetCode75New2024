class Solution {
    public int[] successfulPairs(int[] spells, int[] potions, long success) {
        int[] result = new int[spells.length];
        Arrays.sort(potions);

        // set all result values to 0
        for (int i = 0; i < result.length; i++) {
            result[i] = 0;
        }

        // Bruteforce version Now setting final result array
        /*
         * for (int i = 0; i < spells.length; i++) {
         * for(int j=0;j<potions.length;j++){
         * if((long)spells[i]*(long)potions[j] - success >=0){
         * result[i] =result[i]+1;
         * }
         * }
         * }
         */

        // Binary search version
        for (int i = 0; i < spells.length; i++) {
            int low = 0;
            int high = potions.length - 1;
            int count=0;
            // We need to find the point below which success is not possible
            while (low<=high) {  
                int mid =  low + (high - low) / 2;
                if((long) spells[i] * (long) potions[mid] >= success){
                    high = mid-1;
                    count = potions.length-mid;
                } else{
                    low =mid+1; 
                    
                }
            }
            result[i]=count;
        }

        return result;
    }

}
