/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        return checkPath(root, targetSum);
    }

    public List<List<Integer>> checkPath(TreeNode root, int targetSum){
        List<List<Integer>> pathList = new ArrayList<>();
        
        if(root==null){
            return pathList;
        }
        
        if(root.left==null && root.right==null){
            if(root.val==targetSum){
                List<Integer> path = new ArrayList<>();
                path.add(root.val);
                pathList.add(path);
                return pathList;
            }
        }

        // Subtract the current node's value from targetSum
        targetSum -= root.val;

        List<List<Integer>> leftPath= checkPath(root.left, targetSum);
        List<List<Integer>> rightPath = checkPath(root.right, targetSum);
        // Add the current node to each path
        for (List<Integer> path : leftPath) {
            path.add(0, root.val);
            pathList.add(path);
        }
        for (List<Integer> path : rightPath) {
            path.add(0, root.val);
            pathList.add(path);
        }

        return pathList;


    }


}
